
package manager_panels;

import control.jdbcpostgreSQL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author linhnguyen
 */
public class Report extends javax.swing.JPanel {
    
    private static final java.util.List<String> drink_name = new ArrayList<>();
    private static final java.util.List<String> total_sales = new ArrayList<>();
    private String pm = null;

    public Report() {
        initComponents();
    }
    
    public void load(JPanel panel) {
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(panel);
        panel.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(excess_report, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(50, 50, 50)
                        .addComponent(restock_report, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(50, 50, 50))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pop_analysis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(50, 50, 50)
                        .addComponent(sales_report, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(50, 50, 50))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pop_analysis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sales_report, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(excess_report, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(restock_report, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pop_analysis = new javax.swing.JButton();
        sales_report = new javax.swing.JButton();
        restock_report = new javax.swing.JButton();
        excess_report = new javax.swing.JButton();

        pop_analysis.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        pop_analysis.setText("Popularity Analysis");
        pop_analysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pop_analysisActionPerformed(evt);
            }
        });

        sales_report.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        sales_report.setText("Sales Report");
        sales_report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sales_reportActionPerformed(evt);
            }
        });

        restock_report.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        restock_report.setText("Restock Report");
        restock_report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restock_reportActionPerformed(evt);
            }
        });

        excess_report.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        excess_report.setText("Excess Report");
        excess_report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excess_reportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(excess_report, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(49, 49, 49)
                        .addComponent(restock_report, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pop_analysis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(50, 50, 50)
                        .addComponent(sales_report, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pop_analysis, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sales_report, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(excess_report, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(restock_report, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pop_analysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pop_analysisActionPerformed
        String input = JOptionPane.showInputDialog(this, "YYYY-MM-DD, YYYY-MM-DD");
        String[] split_input = input.split(", ");
        
        jdbcpostgreSQL connection = new jdbcpostgreSQL();
        Connection conn = connection.connect();
        
        try {
            Statement stmt = conn.createStatement();
            String sqlStatement = "SELECT d.name AS drink_name, SUM(d.price) AS total_sales FROM drinks d JOIN orders o ON d.order_id = o.order_id WHERE TO_DATE(o.transaction_date, 'YYYY-MM-DD') BETWEEN '" + split_input[0] + "' AND '" + split_input[1] + "' GROUP BY d.name ORDER BY total_sales DESC LIMIT 10";

            ResultSet result = stmt.executeQuery(sqlStatement);
            
            while(result.next()) {
                drink_name.add(result.getString("drink_name"));
                total_sales.add(result.getString("total_sales"));
            }
            JOptionPane.showMessageDialog(this, String.join(", ", drink_name) + "\n" + String.join(", ", total_sales));
        }
        catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
        }
        
        try {
            conn.close();
        } 
        catch(Exception e) {
            System.out.println("Connection NOT Closed.");
        }
        
        drink_name.clear();
        total_sales.clear();
    }//GEN-LAST:event_pop_analysisActionPerformed

    private void sales_reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sales_reportActionPerformed
        String input = JOptionPane.showInputDialog(this, "YYYY-MM-DD, YYYY-MM-DD, name");
        String[] split_input = input.split(", ");
        
        jdbcpostgreSQL connection = new jdbcpostgreSQL();
        Connection conn = connection.connect();
        
        try {
            Statement stmt = conn.createStatement();
            String sqlStatement = "SELECT d.name AS drink_name, SUM(d.price) AS total_sales FROM drinks d JOIN orders o ON d.order_id = o.order_id WHERE TO_DATE(o.transaction_date, 'YYYY-MM-DD') BETWEEN '" + split_input[0] + "' AND '" + split_input[1] + "' AND LOWER(TRIM(d.name)) ILIKE LOWER(TRIM('" + split_input[2] + "')) GROUP BY d.name;";

            ResultSet result = stmt.executeQuery(sqlStatement);
            
            while(result.next()) {
                drink_name.add(result.getString("drink_name"));
                total_sales.add(result.getString("total_sales"));
            }
            JOptionPane.showMessageDialog(this, String.join(", ", drink_name) + "\n" + String.join(", ", total_sales));
        }
        catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
        }
        
        try {
            conn.close();
        } 
        catch(Exception e) {
            System.out.println("Connection NOT Closed.");
        }
        
        drink_name.clear();
        total_sales.clear();
    }//GEN-LAST:event_sales_reportActionPerformed

    private void restock_reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restock_reportActionPerformed
        jdbcpostgreSQL connection = new jdbcpostgreSQL();
        Connection conn = connection.connect();
        
        try {
            Statement stmt = conn.createStatement();
            String sqlStatement = "SELECT name FROM ingredients WHERE stock_level <= 100;";

            ResultSet result = stmt.executeQuery(sqlStatement);
            
            while(result.next()) {
                pm = result.getString("name");
            }
            JOptionPane.showMessageDialog(this, pm);
        }
        catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
        }
        
        try {
            conn.close();
        } 
        catch(Exception e) {
            System.out.println("Connection NOT Closed.");
        }
    }//GEN-LAST:event_restock_reportActionPerformed

    private void excess_reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excess_reportActionPerformed
        String input = JOptionPane.showInputDialog(this, "YYYY-MM-DD");
        String[] split_input = input.split(", ");
        
        jdbcpostgreSQL connection = new jdbcpostgreSQL();
        Connection conn = connection.connect();
        
        try {
            Statement stmt = conn.createStatement();
            String sqlStatement = "";

            ResultSet result = stmt.executeQuery(sqlStatement);
            
            while(result.next()) {
                drink_name.add(result.getString("drink_name"));
                total_sales.add(result.getString("total_sales"));
            }
            JOptionPane.showMessageDialog(this, String.join(", ", drink_name) + "\n" + String.join(", ", total_sales));
        }
        catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
        }
        
        try {
            conn.close();
        } 
        catch(Exception e) {
            System.out.println("Connection NOT Closed.");
        }
        
        drink_name.clear();
        total_sales.clear();
    }//GEN-LAST:event_excess_reportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton excess_report;
    private javax.swing.JButton pop_analysis;
    private javax.swing.JButton restock_report;
    private javax.swing.JButton sales_report;
    // End of variables declaration//GEN-END:variables
}
