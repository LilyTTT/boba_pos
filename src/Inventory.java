
import java.sql.*;
import java.util.*;
import javax.swing.table.DefaultTableModel;

public class Inventory extends javax.swing.JFrame {
    
    private static final java.util.List<Integer> id_list = new ArrayList<>();
    private static final java.util.List<String> ingredients_list = new ArrayList<>();
    private static final java.util.List<Integer> stock_list = new ArrayList<>();
    private static final java.util.List<String> restock_list = new ArrayList<>();
    private static final java.util.List<String> supplier_list = new ArrayList<>();
    private FrameHandler fh;
    
    public Inventory(FrameHandler fh) {
        this.fh = fh;
        
        try {
            load_ingredients();
            load_inventory();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
   
    private void load_ingredients() {
        jdbcpostgreSQL connection = new jdbcpostgreSQL();
        Connection conn = connection.connect();
        
        try {
            Statement stmt = conn.createStatement();
            String sqlStatement = "SELECT * FROM inventory";

            ResultSet result = stmt.executeQuery(sqlStatement);
            
            while(result.next()) {
                id_list.add(Integer.valueOf(result.getString("staff_id")));
                ingredients_list.add(result.getString("name"));
                stock_list.add(Integer.valueOf(result.getString("stock_level")));
                restock_list.add(result.getString("restock_date"));
                supplier_list.add(result.getString("supplier"));
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
        }
        
        try {
            conn.close();
        } 
        catch(Exception e) {
            System.out.println("Connection NOT Closed.");
        }
        
        for (int i = 0; i < id_list.size(); i++) {
            Object[] row = { id_list.get(i), ingredients_list.get(i), stock_list.get(i), restock_list.get(i), supplier_list.get(i)};
            DefaultTableModel table_model = (DefaultTableModel)jTable2.getModel();
            table_model.addRow(row);
        }
    }
    
    private void load_inventory() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ingredient ID", "Name", "Stock Level", "Restock Date", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Inventory().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
//
//public class InventoryAndShipping extends JFrame {
//    private int currentProductId = 0;
//    private int beforeUpdateId = 0;
//    private Vector<String> removedIds = new Vector<String>();
//
//    private FrameHandler fh;
//
//    /**
//    Creates a new instance of InventoryAndShipping with the specified FrameHandler.
//    Initializes a connection to the PostgreSQL database and populates the JTable with data from the "inventory" table.
//    Adds a WindowListener to the JFrame that closes the connection and exits the application when the window is closed.
//    @param fh the FrameHandler instance that will handle user events.
//    @see FrameHandler
//    */
//
//    public InventoryAndShipping(FrameHandler fh) {
//        this.fh = fh;
//        
//        try{
//            //make connection:
//            Class.forName("org.postgresql.Driver");
//            Connection conn = DriverManager.getConnection("jdbc:postgresql://csce-315-db.engr.tamu.edu/csce315331_team_22", "csce315331_team_22_master", "0000");
//            
//            // Create inventory table
//            Statement stmt = conn.createStatement();
//            ResultSet rs = stmt. executeQuery("SELECT * FROM inventory");
//            ResultSetMetaData rsmd = rs.getMetaData();
//            int columnCount = rsmd.getColumnCount();
//
//            // add Window Listener that closes connection on close
//            addWindowListener(new WindowAdapter(){
//                @Override
//                public void windowClosing(WindowEvent e){
//                    try{
//                        conn.close();
//                        stmt.close();
//                        rs.close();
//                    }catch(SQLException ex){
//                        ex.printStackTrace();
//                    }
//
//                    //exit application
//                    System.exit(0);
//                }
//            });
//            
//            // Create a DefaultTableModel and populate it with data from the "inventory" table
//
//            DefaultTableModel model = new DefaultTableModel(){
//                @Override
//                public Class<?> getColumnClass(int columnIndex){
//                    switch(columnIndex){
//                        case 0:
//                            return String.class;
//                        case 1:
//                            return String.class;
//                        case 2:
//                            return String.class;
//                        default:
//                            return super.getColumnClass(columnIndex);
//                    }
//                }
//            };
//            for(int i = 1; i <= columnCount; i++){
//                model.addColumn(rsmd.getColumnName(i));
//            }
//            
//            while (rs.next()){
//                Object[] row = new Object[columnCount];
//                for(int i = 1; i <= columnCount; i++){
//                    switch(1){
//                        case 1:
//                            row[i-1] = rs.getString(i);
//                            break;
//                        case 2:
//                            row[i-1] = rs.getString(i);
//                            break;
//                        default:
//                            row[i - 1] = rs.getObject(i);
//                            break;
//                    }
//                }
//                
//                
//                if(!row[2].equals("-1")){
//                    model.addRow(row);
//                }
//                
//                
//                currentProductId++;
//                
//
//            }
//
//            beforeUpdateId = currentProductId;
//            
//            
//            JTable table1 = new JTable(model) {
//                
//                @Override
//                public boolean isCellEditable(int row, int col){
//                    switch(col){
//                        case 0:
//                            return false;
//                        default:
//                            return true;
//                    }
//                }
//            };
//            JScrollPane scrollPane1 = new JScrollPane(table1);
//
//            JPanel buttonPanel = new JPanel();
//
//            JButton home = new JButton("Home");
//            home.addActionListener(fh);
//            buttonPanel.add(home);
//            
//            JButton addRowButton = new JButton("Add Row");
//            addRowButton.addActionListener(new ActionListener(){
//                @Override
//                public void actionPerformed(ActionEvent e){
//                    Object[] row1 = new Object[columnCount];
//                    for(int i = 0; i < columnCount; i++){
//                        if(i == 0){
//                            row1[i] = Integer.toString(++currentProductId);
//                        }else{
//                            row1[i] = null;
//                        }
//                    }
//                    model.addRow(row1);
//                }
//            });
//            buttonPanel.add(addRowButton);
//
//            JButton deleteRowButton = new JButton("Delete Row");
//            deleteRowButton = new JButton("Delete Row");
//            deleteRowButton.addActionListener(new ActionListener(){
//                @Override
//                public void actionPerformed(ActionEvent e){
//                    int selectedRow = table1.getSelectedRow();
//                    if(selectedRow != -1){
//                        String id = (String) model.getValueAt(selectedRow,0);
//                        removedIds.add(id);
//                        model.removeRow(selectedRow);
//                    }
//
//                }
//            });
//            buttonPanel.add(deleteRowButton);
//
//            JButton updateDatabaseButton = new JButton("Update");
//            updateDatabaseButton.addActionListener(new ActionListener(){
//                public void actionPerformed(ActionEvent e){
//                    try{
//                        conn.setAutoCommit(false);
//                        PreparedStatement updateStmt = conn.prepareStatement("UPDATE inventory SET product_name = ?, quantity = ? WHERE product_id = ?");
//                        PreparedStatement insertStmt = conn.prepareStatement("INSERT INTO inventory (product_id, product_name, quantity) VALUES(?, ?, ?)");
//                        PreparedStatement deleteStmt = conn.prepareStatement("UPDATE inventory SET quantity = -1 WHERE product_id = ?");
//
//                        // update existing rows
//                        for(int i = 0; i < model.getRowCount(); i++){
//                            
//                            
//                            updateStmt.setString(1,(String)model.getValueAt(i,1));
//                            updateStmt.setBigDecimal(2, new BigDecimal((String)model.getValueAt(i,2)));
//                            updateStmt.setInt(3, Integer.parseInt((String)model.getValueAt(i,0)));
//                            updateStmt.executeUpdate();
//                        }
//                        
//                        // update deleted rows
//                        for(int i = 0; i < removedIds.size(); i++){
//                            deleteStmt.setInt(1, Integer.parseInt((String)removedIds.get(i)));
//                            deleteStmt.executeUpdate();
//                        }
//                        // insert new rows for product_id > before Update_Id
//                        
//                        for(int i = 0; i < model.getRowCount(); i++){
//                            String productId = (String)model.getValueAt(i,0);
//                            //int productId = tempproductId
//                            if(Integer.parseInt(productId) > beforeUpdateId){
//                                
//                                String productName = (String)model.getValueAt(i,1);
//                                String quan = (String)model.getValueAt(i,2);
//                                if (productName != null || quan != null){
//                                    insertStmt.setInt(1,Integer.parseInt(productId));
//                                    insertStmt.setString(2, productName);
//                                    insertStmt.setBigDecimal(3, new BigDecimal(quan));
//                                    insertStmt.executeUpdate();
//                                    beforeUpdateId++;
//                                }
//                                
//                                
//                            }
//
//                            
//                        }
//                        
//                        
//                        
//                        conn.commit();
//                        
//                        
//                        JOptionPane.showMessageDialog(InventoryAndShipping.this, "Database updated successfully.");
//                    }catch(SQLException ex){
//                        try{
//                            conn.rollback();
//                        } catch (SQLException ex2){
//                            ex2.printStackTrace();
//                        }
//                        JOptionPane.showMessageDialog(InventoryAndShipping.this, "Error updating database: " + ex.getMessage());
//                    }
//                }
//            });
//
//            buttonPanel.add(updateDatabaseButton);
//            
//            // Create a panel to hold the tables
//            JPanel panel = new JPanel(new GridLayout(2, 1, 10, 10));
//            panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // add a 10 pixel margin around the panel
//            panel.add(scrollPane1);
//            //panel.add(scrollPane2);
//            panel.add(buttonPanel);
//
//            // Add the panel to the frame
//            getContentPane().add(panel); // add the panel directly to the frame's content pane
//
//            // Set the frame properties
//            setTitle("InventoryAndShipping");
//            setSize(500, 300);
//            setLocationRelativeTo(null);
//            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//           
//        
//        }catch (Exception e){
//            e.printStackTrace();
//        }
//    }
//}